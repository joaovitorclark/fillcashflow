
"""
format_sheet.py
---------------

This script generates a styled cash flow Excel file from a CSV and YAML configuration,
applying conditional formatting and formulas to calculate the running balance while
considering inflows, outflows, and credit card due payments.

Output is saved to: outputs/format_sheet_DDMMYY.xlsx

Author: Auto-generated by ChatGPT
"""

import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment
from openpyxl.formatting.rule import ColorScaleRule
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.utils import get_column_letter
import yaml
from pathlib import Path
from datetime import datetime

def load_data(csv_path: str, config_path: str):
    """
    Load CSV data and YAML configuration.

    Args:
        csv_path (str): Path to the input CSV file.
        config_path (str): Path to the YAML configuration file.

    Returns:
        tuple: (DataFrame, config dictionary)
    """
    df = pd.read_csv(csv_path, sep="|")
    with open(config_path, "r") as f:
        config = yaml.safe_load(f)
    return df, config

def apply_card_styles(ws, col_idx, cards):
    """
    Apply header and alternating row colors to credit card columns.
    """
    for card in cards:
        name = f"{card['bank'].capitalize()} - {card['name'].capitalize()} ({card['last_digits']})"
        colors = card["color"]
        if name in col_idx:
            col_letter = get_column_letter(col_idx[name])
            ws[f"{col_letter}1"].fill = PatternFill(start_color=colors[0][1:], end_color=colors[0][1:], fill_type="solid")
            for row in range(2, ws.max_row + 1):
                fill_color = colors[1] if row % 2 == 0 else colors[2]
                ws[f"{col_letter}{row}"].fill = PatternFill(start_color=fill_color[1:], end_color=fill_color[1:], fill_type="solid")

def insert_balance_formulas(ws, col_idx, cards):
    """
    Add running balance formulas to the 'balance' column in the worksheet.
    """
    balance_letter = get_column_letter(col_idx["balance"])
    inflow_letter = get_column_letter(col_idx["inflow"])
    outflow_letter = get_column_letter(col_idx["outflow"])
    date_letter = get_column_letter(col_idx["date"])

    card_due_days = {
        f"{c['bank'].capitalize()} - {c['name'].capitalize()} ({c['last_digits']})": c["due_day"]
        for c in cards
    }

    for row in range(2, ws.max_row + 1):
        inflow_cell = f"{inflow_letter}{row}"
        outflow_cell = f"{outflow_letter}{row}"
        prev_balance = f"{balance_letter}{row - 1}" if row > 2 else "0"
        deductions = []

        for card, due_day in card_due_days.items():
            if card in col_idx:
                card_letter = get_column_letter(col_idx[card])
                deductions.append(f"IF(DAY({date_letter}{row})={due_day},{card_letter}{row},0)")

        deduction_expr = "-(" + "+".join(deductions) + ")" if deductions else ""
        formula = f"={prev_balance}+{inflow_cell}-{outflow_cell}{deduction_expr}"

        cell = ws[f"{balance_letter}{row}"]
        cell.value = formula
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center")

def apply_conditional_formatting(ws, col_idx):
    """
    Apply a red-yellow-green gradient to the balance column.
    """
    balance_letter = get_column_letter(col_idx["balance"])
    balance_range = f"{balance_letter}2:{balance_letter}{ws.max_row}"
    rule = ColorScaleRule(
        start_type='num', start_value=-5000, start_color='FF0000',
        mid_type='num', mid_value=0, mid_color='FFFF00',
        end_type='num', end_value=20000, end_color='00FF00'
    )
    ws.conditional_formatting.add(balance_range, rule)
    ws[f"{balance_letter}1"].font = Font(bold=True)

def center_all_cells(ws):
    """
    Center-align all cells in the worksheet.
    """
    for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
        for cell in row:
            cell.alignment = Alignment(horizontal="center", vertical="center")

def generate_cashflow_excel(df, config, output_path):
    """
    Generate a styled Excel file with cashflow formulas and formatting.
    """
    df["balance"] = 0  # Placeholder for Excel formulas

    wb = Workbook()
    ws = wb.active
    ws.title = "Cashflow"

    for row in dataframe_to_rows(df, index=False, header=True):
        ws.append(row)

    header = [cell.value for cell in ws[1]]
    col_idx = {col: idx + 1 for idx, col in enumerate(header)}

    apply_card_styles(ws, col_idx, config["cards"])
    insert_balance_formulas(ws, col_idx, config["cards"])
    apply_conditional_formatting(ws, col_idx)
    center_all_cells(ws)

    wb.save(output_path)

def main():
    today_str = datetime.today().strftime("%d%m%y")
    output_file = f"outputs/format_sheet_{today_str}.xlsx"

    df, config = load_data("outputs/silver_statements.csv", "config.yml")
    Path("outputs").mkdir(parents=True, exist_ok=True)

    generate_cashflow_excel(df, config, output_file)
    print(f"âœ… Cashflow file saved to: {output_file}")

if __name__ == "__main__":
    main()
